name: Build and Publish AI Service (multi-arch)

on:
  push:
    branches: [ main ]
    paths:
      - 'ai-service/**'
      - '.github/workflows/ai-service-docker.yml'
    tags:
      - 'ai-service-v*'
  workflow_dispatch:
    inputs:
      arch:
        description: "Target architecture"
        required: false
        type: choice
        options:
          - amd64
          - arm64
          - both
        default: both
      format:
        description: "Package format for downloadable image"
        required: false
        type: choice
        options:
          - tar
          - oci
        default: tar

permissions:
  contents: write
  packages: write

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU (emulation)
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository_owner }}/ai-service
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=sha,format=long
            type=ref,event=tag

      - name: Build and push (linux/amd64, linux/arm64)
        uses: docker/build-push-action@v6
        with:
          context: ./ai-service
          file: ./ai-service/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: false
          sbom: false


  package-image:
    if: github.event_name == 'workflow_dispatch' || github.event_name == 'push'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        arch: [ amd64, arm64 ]
    env:
      ARCH: ${{ inputs.arch || 'both' }}
      FORMAT: ${{ inputs.format || 'tar' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU (emulation)
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Decide output filename
        id: out
        run: |
          echo "EXT=${{ env.FORMAT }}" >> $GITHUB_ENV
          echo "FILE=ai-service_linux_${{ matrix.arch }}.${{ env.FORMAT }}" >> $GITHUB_ENV
          if [ "${{ env.FORMAT }}" = "tar" ]; then
            # tar -> docker-archive（等价 docker save，可直接 docker load -i）
            echo "OUT_TYPE=docker" >> $GITHUB_ENV
          else
            # oci -> OCI layout（需 nerdctl/ctr/skopeo 导入）
            echo "OUT_TYPE=oci" >> $GITHUB_ENV
          fi

      - name: Build and export image (linux/${{ matrix.arch }})
        if: env.ARCH == 'both' || env.ARCH == matrix.arch
        run: |
          docker buildx build \
            --platform linux/${{ matrix.arch }} \
            -f ai-service/Dockerfile \
            -t ai-service:${{ matrix.arch }} \
            --output type=${{ env.OUT_TYPE }},dest=${{ env.FILE }} \
            ai-service

      - name: Verify exported file exists (linux/${{ matrix.arch }})
        if: env.ARCH == 'both' || env.ARCH == matrix.arch
        run: |
          ls -lh "${{ env.FILE }}"
          test -s "${{ env.FILE }}"

      - name: Upload image artifact (linux/${{ matrix.arch }})
        if: env.ARCH == 'both' || env.ARCH == matrix.arch
        uses: actions/upload-artifact@v4
        with:
          name: ai-service-${{ matrix.arch }}-${{ env.FORMAT }}
          path: ${{ env.FILE }}

  release-packages:
    if: startsWith(github.ref, 'refs/tags/ai-service-v')
    needs: package-image
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: ai-service-*
          merge-multiple: true

      - name: Create GitHub Release and upload assets
        uses: softprops/action-gh-release@v2
        with:
          files: |
            ai-service_*.tar
            ai-service_*.oci
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # 可选：同时推送到 Docker Hub（设置 DOCKERHUB_USERNAME/DOCKERHUB_TOKEN 机密）
      # - name: Login to Docker Hub
      #   if: ${{ secrets.DOCKERHUB_USERNAME && secrets.DOCKERHUB_TOKEN }}
      #   uses: docker/login-action@v3
      #   with:
      #     username: ${{ secrets.DOCKERHUB_USERNAME }}
      #     password: ${{ secrets.DOCKERHUB_TOKEN }}
      #
      # - name: Build and push to Docker Hub
      #   if: ${{ secrets.DOCKERHUB_USERNAME && secrets.DOCKERHUB_TOKEN }}
      #   uses: docker/build-push-action@v6
      #   with:
      #     context: ./ai-service
      #     file: ./ai-service/Dockerfile
      #     platforms: linux/amd64,linux/arm64
      #     push: true
      #     tags: ${{ secrets.DOCKERHUB_USERNAME }}/ai-service:latest
      #     cache-from: type=gha
      #     cache-to: type=gha,mode=max


