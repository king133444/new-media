generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String             @id @default(cuid())
  username               String             @unique
  email                  String             @unique
  password               String
  role                   UserRole           @default(ADVERTISER)
  avatar                 String?
  status                 UserStatus         @default(ACTIVE)
  bio                    String?
  skills                 String?
  contact                String?
  company                String?
  industry               String?
  tags                   String?
  walletBalance          Float              @default(0)
  paymentAccount         String?
  isVerified             Boolean            @default(false)
  createdAt              DateTime           @default(now())
  updatedAt              DateTime           @updatedAt

  // 关系
  ordersAsCustomer       Order[]            @relation("CustomerOrders")
  ordersAsDesigner       Order[]            @relation("DesignerOrders")
  sentCommunications     Communication[]    @relation("SentCommunications")
  receivedCommunications Communication[]    @relation("ReceivedCommunications")
  orderApplications      OrderApplication[]
  materials              Material[]
  portfolios             Portfolio[]
  reviewsAsReviewer      Review[]           @relation("ReviewerReviews")
  reviewsAsReviewee      Review[]           @relation("RevieweeReviews")
  transactions           Transaction[]

  @@map("users")
}

model Order {
  id                  String             @id @default(cuid())
  title               String
  description         String?
  type                OrderType
  amount              Float
  budget              Float?
  status              OrderStatus        @default(PENDING)
  priority            Priority           @default(MEDIUM)
  deadline            DateTime?
  contentRequirements String?
  requirements        String?
  tags                String?
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt

  // 关系
  customerId String
  customer   User               @relation("CustomerOrders", fields: [customerId], references: [id])
  designerId String?
  designer   User?              @relation("DesignerOrders", fields: [designerId], references: [id])
  applications OrderApplication[]
  reviews     Review[]
  materials   Material[]
  transactions Transaction[]

  @@map("orders")
}

model Communication {
  id         String              @id @default(cuid())
  content    String
  type       CommunicationType   @default(MESSAGE)
  status     CommunicationStatus @default(UNREAD)
  createdAt  DateTime            @default(now())
  updatedAt  DateTime            @updatedAt

  // 关系
  senderId   String
  sender     User                @relation("SentCommunications", fields: [senderId], references: [id])
  receiverId String
  receiver   User                @relation("ReceivedCommunications", fields: [receiverId], references: [id])

  @@map("communications")
}

model OrderApplication {
  id          String            @id @default(cuid())
  message     String?
  status      ApplicationStatus @default(PENDING)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  // 关系
  orderId     String
  order       Order             @relation(fields: [orderId], references: [id])
  userId      String
  user        User              @relation(fields: [userId], references: [id])

  // 离线提醒（广告主离线时的补推依据）
  publisherId String            // 订单发布者（广告主）ID = order.customerId
  isRead      Boolean           @default(false) // 广告主是否已读此申请
  deliveredAt DateTime?         // （可选）何时已推送到在线端

  @@unique([orderId, userId])
  @@index([publisherId, isRead])
  @@map("order_applications")
}

// 新增：补齐被引用但未定义的模型，消除 Prisma 校验报错
model Material {
  id          String         @id @default(cuid())
  type        MaterialType
  status      MaterialStatus @default(ACTIVE)
  url         String
  title       String?
  description String?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  // 关系
  userId String
  user   User           @relation(fields: [userId], references: [id])
  orderId String?
  order   Order?        @relation(fields: [orderId], references: [id])

  @@map("materials")
}

model Portfolio {
  id          String           @id @default(cuid())
  title       String
  description String?
  status      PortfolioStatus  @default(ACTIVE)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  // 关系
  userId String
  user   User @relation(fields: [userId], references: [id])

  @@map("portfolios")
}

model Review {
  id        String        @id @default(cuid())
  rating    Int?
  comment   String?
  status    ReviewStatus  @default(PENDING)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  // 关系
  orderId   String
  order     Order         @relation(fields: [orderId], references: [id])

  reviewerId String
  reviewer   User         @relation("ReviewerReviews", fields: [reviewerId], references: [id])

  revieweeId String
  reviewee   User         @relation("RevieweeReviews", fields: [revieweeId], references: [id])

  @@map("reviews")
}

model Transaction {
  id        String             @id @default(cuid())
  amount    Float
  type      TransactionType
  status    TransactionStatus  @default(PENDING)
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt

  // 关系
  userId String
  user   User   @relation(fields: [userId], references: [id])

  orderId String?
  order   Order? @relation(fields: [orderId], references: [id])

  @@map("transactions")
}

enum UserRole {
  ADMIN
  ADVERTISER
  CREATOR
  DESIGNER
}

enum UserStatus {
  ACTIVE
  INACTIVE
  BANNED
}

enum OrderType {
  VIDEO
  DESIGN
  H5
  ANIMATION
  AUDIO
  OTHER
}

enum OrderStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum ReviewStatus {
  PENDING
  APPROVED
  REJECTED
}

enum CustomerLevel {
  REGULAR
  VIP
  PREMIUM
}

enum RiskLevel {
  LOW
  MEDIUM
  HIGH
}

enum CustomerStatus {
  ACTIVE
  INACTIVE
  BLACKLISTED
}

enum MaterialType {
  AUDIO
  VIDEO
  IMAGE
  PAGE
  H5
  MINIPROGRAM
  OTHER
}

enum MaterialStatus {
  ACTIVE
  INACTIVE
  DELETED
}

enum TransactionType {
  DEPOSIT
  WITHDRAWAL
  PAYMENT
  REFUND
  COMMISSION
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
}

enum CommunicationType {
  MESSAGE
  NOTIFICATION
  SYSTEM
}

enum CommunicationStatus {
  UNREAD
  READ
  ARCHIVED
}

enum PortfolioStatus {
  ACTIVE
  INACTIVE
  DELETED
}

enum ApplicationStatus {
  PENDING
  ACCEPTED
  REJECTED
}
